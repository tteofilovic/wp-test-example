<?php

use \TestStars\Model\Stars;
use \TestStars\Controller\Admin;

class Test_Admin extends WP_UnitTestCase
{

    private $postId;
    private $stars;
    private $admin;
    private $userId;

    public function setUp()
    {
        parent::setUp();

        // Create dummy user id.
        $this->userId = $this->factory->user->create(['role' => 'editor']);

        // Create a dummy post using the 'WP_UnitTest_Factory_For_Post' class
        $this->postId = $this->factory->post->create(
            [
                'post_status' => 'publish',
                'post_type' => 'post'
            ]
        );

        // Create a custom query for the post with the above created post id.
        $wp_query = new WP_Query(
            [
                'post__in' => [$this->postId],
                'posts_per_page' => 1,
            ]
        );

        // Run the WordPress loop through this query to set the global $post.
        if ($wp_query->have_posts()) {
            while ($wp_query->have_posts()) {
                $wp_query->the_post();
            }
        }

        // Create dummy user with editor role and set it as current user.
        $this->userId = $this->factory->user->create(['role' => 'editor']);
        wp_set_current_user($this->userId);

        // Set current page to edit-post.
        set_current_screen('edit-post');

        // Initialize Admin class
        $this->admin = new Admin();
    }

    public function tearDown()
    {
        parent::tearDown();
    }

    /**
     * @test
     */
    public function class_constructor()
    {
        // Check if action "add_meta_boxes" is registered.
        $action = has_action('add_meta_boxes', [$this->admin, 'registerMetaBox']);
        $this->assertTrue($action === 10);

        // Check if action "save_post" is registered.
        $action = has_action('save_post', [$this->admin, 'saveMetaBox']);
        $this->assertTrue($action === 10);
    }

    /**
     * @test
     */
    public function register_meta_box()
    {
        // use global WP variable $wp_meta_boxes
        global $wp_meta_boxes;

        // Check if any meta box exist
        $this->assertEmpty($wp_meta_boxes);

        // Execute method registerMetaBox()
        $this->admin->registerMetaBox();

        // Check if meta box with Id 'stars' registered
        $metaBoxId = $wp_meta_boxes['post']['advanced']['default']['stars']['id'];
        $this->assertTrue($metaBoxId === 'stars');
    }

    /**
     * @test
     */
    public function render_meta_box()
    {
        // Get HTML content which is generated by method renderMetaBox()
        ob_start();
        $this->admin->renderMetaBox();
        $content = ob_get_clean();

        // Check if HTML contains "custom_nonce" input field
        $this->assertTrue(strpos($content, 'name="custom_nonce"') !== false);

        // Check if HTML contains "stars" input field
        $this->assertTrue(strpos($content, 'name="stars"') !== false);

        // Check if value of "stars" input field is 0
        $this->assertTrue(strpos($content, 'value="0"') !== false);

        // save stars number in post meta
        update_post_meta($this->postId, 'stars', 3);

        // Get HTML content which is generated by method renderMetaBox()
        ob_start();
        $this->admin->renderMetaBox();
        $content = ob_get_clean();

        // Check if value of "stars" input field is 3
        $this->assertTrue(strpos($content, 'value="3"') !== false);
    }

    /**
     * @test
     */
    public function save_meta_box_and_validations()
    {
        // Get nonce field
        $nonce = wp_nonce_field('custom_nonce_action', 'custom_nonce', true, false);

        // Get value of custom_nonce field
        $pattern = '/<input(.*)name=\"custom_nonce\" value=\"(.*?)\"/i';
        preg_match_all($pattern, $nonce, $matches);
        $trueNonce = $matches[2][0];
        $falseNonce = '196712296fcdee';

        // Set custom_nonce and number of stars into global $_POST array
        $_POST['custom_nonce'] = $trueNonce;
        $_POST['stars'] = 1;

        // Execute method
        $this->admin->saveMetaBox($this->postId, null);

        // Check if saved meta box contains correct value
        $value = (int)get_post_meta($this->postId, 'stars', true);
        $this->assertTrue($value === 1);

        // Set new number of stars and check again
        $_POST['stars'] = -1;
        $this->admin->saveMetaBox($this->postId, null);
        $value = (int)get_post_meta($this->postId, 'stars', true);
        $this->assertTrue($value === 1);

        // Set new number of stars and check again
        $_POST['stars'] = 12;
        $this->admin->saveMetaBox($this->postId, null);
        $value = (int)get_post_meta($this->postId, 'stars', true);
        $this->assertTrue($value === 5);

        // save stars number in post meta
        update_post_meta($this->postId, 'stars', 3);

        // Set new number of stars and false nonce and check again
        $_POST['custom_nonce'] = $falseNonce;
        $_POST['stars'] = 2;
        $this->admin->saveMetaBox($this->postId, null);
        $value = (int)get_post_meta($this->postId, 'stars', true);
        $this->assertTrue($value === 3);

        // Set new number of stars and check again
        $_POST['custom_nonce'] = $trueNonce;
        unset($_POST['stars']);
        $this->admin->saveMetaBox($this->postId, null);
        $value = (int)get_post_meta($this->postId, 'stars', true);
        $this->assertTrue($value === 3);

        // Set new number of stars and check again
        $_POST['custom_nonce'] = $trueNonce;
        $_POST['stars'] = -8;
        $this->admin->saveMetaBox($this->postId, null);
        $value = (int)get_post_meta($this->postId, 'stars', true);
        $this->assertTrue($value === 5);

        // Create dummy user with editor role and set it as current user.
        $this->userId = $this->factory->user->create(['role' => 'subscriber']);
        wp_set_current_user($this->userId);

        // save stars number in post meta
        update_post_meta($this->postId, 'stars', 3);

        // Check if unauthorized use can save meta box
        $_POST['stars'] = 1;
        $this->admin->saveMetaBox($this->postId, null);
        $value = (int)get_post_meta($this->postId, 'stars', true);
        $this->assertTrue($value === 3);
    }

}
